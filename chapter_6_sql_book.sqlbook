-- SQLBook: Code
CREATE TABLE Orders (
  OrderId int,
  OrderStatus varchar(30),
  LastUpdated timestamp
);

INSERT INTO Orders
  VALUES(1,'Backordered', '2020-06-01');
INSERT INTO Orders
  VALUES(1,'Shipped', '2020-06-09');
INSERT INTO Orders
  VALUES(2,'Shipped', '2020-07-11');
INSERT INTO Orders
  VALUES(1,'Shipped', '2020-06-09');
INSERT INTO Orders
  VALUES(3,'Shipped', '2020-07-12');

  SELECT * from orders;
-- SQLBook: Code
select
    OrderId,
    OrderStatus,
    LastUpdated,
    count(*) as dup_count
from
    Orders
group by
    OrderId,
    OrderStatus,
    LastUpdated
Having
    COUNT(*) > 1;
-- SQLBook: Markup
distinct_orders_1.sql
-- SQLBook: Code
CREATE TABLE distinct_orders AS
SELECT DISTINCT OrderId,
  OrderStatus,
  LastUpdated
FROM ORDERS;

-- TRUNCATE TABLE Orders;

-- insert into Orders select * from distinct_orders;
SELECT* FROM Orders;
select * from distinct_orders;

drop table distinct_orders;
-- SQLBook: Code
SELECT
  OrderId,
  OrderStatus,
  LastUpdated,
  ROW_NUMBER() OVER(PARTITION BY OrderId,
                    OrderStatus,
                    LastUpdated)
    AS dup_count
FROM Orders;
-- SQLBook: Code
-- drop table orders;
-- SQLBook: Markup
distinct_orders_2.sql
-- SQLBook: Code
CREATE TABLE all_orders AS
SELECT
  OrderId,
  OrderStatus,
  LastUpdated,
  ROW_NUMBER() OVER(PARTITION BY OrderId,
                    OrderStatus,
                    LastUpdated)
    AS dup_count
FROM Orders;

TRUNCATE TABLE Orders;

-- only insert non-duplicated records
INSERT INTO Orders
  (OrderId, OrderStatus, LastUpdated)
SELECT
  OrderId,
  OrderStatus,
  LastUpdated
FROM all_orders
WHERE
  dup_count = 1;

DROP TABLE all_orders;
-- SQLBook: Markup
orders_customers_tables_full.sql
-- SQLBook: Code
DROP table Orders
-- SQLBook: Code
CREATE TABLE Orders (
  OrderId int,
  OrderStatus varchar(30),
  OrderDate timestamp,
  CustomerId int,
  OrderTotal numeric
);

INSERT INTO Orders
  VALUES(1,'Shipped','2020-06-09',100,50.05);
INSERT INTO Orders
  VALUES(2,'Shipped','2020-07-11',101,57.45);
INSERT INTO Orders
  VALUES(3,'Shipped','2020-07-12',102,135.99);
INSERT INTO Orders
  VALUES(4,'Shipped','2020-07-12',100,43.00);

SELECT * FROM orders;

CREATE TABLE Customers
(
  CustomerId int,
  CustomerName varchar(20),
  CustomerCountry varchar(10)
);

INSERT INTO Customers VALUES(100,'Jane','USA');
INSERT INTO Customers VALUES(101,'Bob','UK');
INSERT INTO Customers VALUES(102,'Miles','UK');
-- SQLBook: Markup
order_summary_daily
-- SQLBook: Code
CREATE TABLE IF NOT EXISTS order_summary_daily (
    order_date date,
    order_country varchar(10),
    total_revenue numeric,
    order_count int
);
insert into
    order_summary_daily (
        order_date,
        order_country,
        total_revenue,
        order_count
    )
select
    o.OrderDate as order_date,
    c.CustomerCountry as order_country,
    sum(o.OrderTotal) as total_revenue,
    count(o.OrderId) as order_count
from Orders o
inner join Customers c on 
    c.CustomerId = o.Customerid
group by o.OrderDate, c.CustomerCountry
-- SQLBook: Markup
How much revenue was generated from orders placed from a given country in a given month?
-- SQLBook: Code
select
    date_part('month', order_date) as order_month,
    order_country,
    sum(total_revenue) as order_revenue
from
    order_summary_daily
group by
    date_part('month', order_date),
    order_country
order by 
    date_part('month', order_date),
    order_country;
-- SQLBook: Markup
How many orders were placed on a given day?
-- SQLBook: Code
select
    order_date,
    sum(order_count) as total_orders
from
    order_summary_daily
GROUP BY
    order_date
order by
    order_date
-- SQLBook: Code
select * from order_summary_daily;
select * from orders;
-- SQLBook: Markup
Type II slowly changing dimension (Type II SCD) - add a new record to a table for each change to an entity, including the date range that the record was valid.
-- SQLBook: Code
CREATE TABLE Customers_scd
(
    CustomerID int, 
    CustomerName varchar(20),
    CustomerCountry varchar(10),
    ValidFrom timestamp,
    Expired timestamp
);

INSERT INTO Customers_scd
  VALUES(100,'Jane','USA','2019-05-01 7:01:10',
    '2020-06-20 8:15:34');
INSERT INTO Customers_scd
  VALUES(100,'Jane','UK','2020-06-20 8:15:34',
    '2199-12-31 00:00:00');
-- SQLBook: Markup
Join the SCD w/ the Orders table you created earlier to get the properties of the customer record at the time of the order.
-- SQLBook: Code
select
    o.OrderId,
    o.OrderDate,
    c.CustomerName,
    c.CustomerCountry
from
    Orders as o
    inner join Customers_scd as c on o.CustomerId = c.CustomerId
    and o.OrderDate between c.ValidFrom
    and c.Expired
order by
    o.Orderdate;
-- SQLBook: Markup
Modeling Incremental Changing Data
-- SQLBook: Code
create table Customers_staging(
    CustomerId int,
    CustomerName varchar(20),
    CustomerCountry varchar(10),
    LastUpdated timestamp
);

INSERT INTO Customers_staging
  VALUES(100,'Jane','USA','2019-05-01 7:01:10');
INSERT INTO Customers_staging
  VALUES(101,'Bob','UK','2020-01-15 13:05:31');
INSERT INTO Customers_staging
  VALUES(102,'Miles','UK','2020-01-29 9:12:00');
INSERT INTO Customers_staging
  VALUES(100,'Jane','UK','2020-06-20 8:15:34');
-- SQLBook: Markup
How much revenue was generated from orders placed from a given country in a given month?
-- SQLBook: Markup
Lets model our logic by allocating Jane to her current country
-- SQLBook: Code
create table order_summary_daily_current
(
    order_date date,
    order_country varchar(10),
    total_revenue numeric,
    order_count int
);

insert into order_summary_daily_current
(
    order_date, order_country, total_revenue, order_count
) with customers_current as
(
    select CustomerId, Max(LastUpdated) as latest_update
    from Customers_staging
    group by CustomerId
)
select 
    o.OrderDate as order_date,
    cs.CustomerCountry as order_country,
    sum(o.OrderTotal) as total_revenue,
    count(o.OrderId) as order_count
from Orders o
inner join customers_current cc
    on cc.CustomerId = o.CustomerId
inner join Customers_staging cs
    on cs.CustomerId = cc.customerid
        AND cs.LastUpdated = cc.latest_update
group by o.OrderDate, cs.CustomerCountry;
-- SQLBook: Code
select CustomerId, Max(LastUpdated) as latest_update
    from Customers_staging
    group by CustomerId;
-- SQLBook: Code
-- select 
--     o.OrderDate as order_date,
--     cs.CustomerCountry as order_country,
--     sum(o.OrderTotal) as total_revenue,
--     count(o.OrderId) as order_count
-- from Orders o
-- inner join customers_current cc
--     on cc.CustomerId = o.CustomerId
-- inner join Customers_staging cs
--     on cs.CustomerId = cc.customerid
--         AND cs.LastUpdated = cc.latest_update
-- group by o.OrderDate, cs.CustomerCountry;
-- SQLBook: Markup
How much revenue was generated from orders placed from a given country in a given month?
-- SQLBook: Code
select
    date_part('month', order_date) as order_month,
    order_country,
    sum(total_revenue) as order_revenue
from
    order_summary_daily_current
group by
    date_part('month', order_date),
    order_country
order by
    date_part('month', order_date),
    order_country;
-- SQLBook: Markup
If instead you want to allocate orders to the country that the customers lived in a the time of order, then logic should be different. 

Instead, find the most recent record that was updated on or before the time of each order placed by each customer

"I want the information about the customer that was valid at the time they placed the order"
-- SQLBook: Markup
The customer_pit (point in time) CTE in the following sample contains the MAX(cs.LastUpdated) for each CustomerId/OrderId pair.

I must join based on the OrderId and CustomerId
-- SQLBook: Code
create table order_summary_daily_pit (
    order_date date,
    order_country varchar(10),
    total_revenue numeric,
    order_count int
);
insert into
    order_summary_daily_pit (
        order_date,
        order_country,
        total_revenue,
        order_count
    ) with customer_pit as (
        select
            cs.CustomerId,
            o.OrderId,
            Max(cs.LastUpdated) as max_update_date
        from
            Orders o
            inner join customers_staging as cs on cs.customerid = o.customerid
            and cs.lastupdated <= o.orderdate
        group by
            cs.customerid,
            o.orderId
    )
SELECT
    o.OrderDate AS order_date,
    cs.CustomerCountry AS order_country,
    SUM(o.OrderTotal) AS total_revenue,
    COUNT(o.OrderId) AS order_count
FROM
    Orders o
    INNER JOIN customer_pit cp ON cp.CustomerId = o.CustomerId
    AND cp.OrderId = o.OrderId
    INNER JOIN Customers_staging cs ON cs.CustomerId = cp.CustomerId
    AND cs.LastUpdated = cp.max_update_date
GROUP BY
    o.OrderDate,
    cs.CustomerCountry;
-- SQLBook: Code
select
    date_part('month', order_date) as order_month,
    order_country,
    sum(total_revenue) as order_revenue
from
    order_summary_daily_pit
group by
    date_part('month', order_date),
    order_country
order by
    date_part('month', order_date),
    order_country;
-- SQLBook: Markup
# Modeling Append-Only Data
-- SQLBook: Markup
PageViews table
-- SQLBook: Code
CREATE TABLE PageViews (
  CustomerId int,
  ViewTime timestamp,
  UrlPath varchar(250),
  utm_medium varchar(50)
);

INSERT INTO PageViews
  VALUES(100,'2020-06-01 12:00:00',
    '/home','social');
INSERT INTO PageViews
  VALUES(100,'2020-06-01 12:00:13',
    '/product/2554',NULL);
INSERT INTO PageViews
  VALUES(101,'2020-06-01 12:01:30',
    '/product/6754','search');
INSERT INTO PageViews
  VALUES(102,'2020-06-02 7:05:00',
    '/home','NULL');
INSERT INTO PageViews
  VALUES(101,'2020-06-02 12:00:00',
    '/product/2554','social');
-- SQLBook: Markup
PageViews Daily table
-- SQLBook: Code
create table pageviews_daily
(
    view_date date,
    url_path VARCHAR(250),
    customer_country varchar(50),
    view_count int
);
-- SQLBook: Markup
pageviews_daily.sql
-- SQLBook: Code
insert into
    pageviews_daily (
        view_date,
        url_path,
        customer_country,
        view_count
    )
SELECT
    CAST(p.ViewTime as Date) as view_date,
    p.UrlPath as url_path,
    c.customercountry as customer_country,
    count(*) as view_count
from
    pageviews as p
    left join Customers as c on c.customerid = p.customerid
GROUP BY
    cast(p.viewtime as Date),
    p.urlpath,
    c.customercountry;
-- SQLBook: Markup
How many page views do customers from each country generate each day?
-- SQLBook: Code
--group by customer_country
select
    view_date,
    customer_country,
    sum(view_count) as sum
from
    pageviews_daily
group by
    customer_country,
    view_date
order by
    customer_country,
    view_date;
-- SQLBook: Markup
